{"version":3,"sources":["components/Authentication/Registration/Registration.tsx","components/Authentication/Login/Login.tsx","components/Contact/Contact.tsx","components/Home/Home.tsx","components/Nav/Header/Header.tsx","components/Nav/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Registration","React","Component","Login","className","id","type","htmlFor","name","to","path","component","Contact","Home","props","Header","HeaderProps","Footer","href","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAaeA,E,iLARP,OACI,iD,GAJeC,IAAMC,WC8DlBC,E,iLAzDP,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4CACX,8BACI,yBAAKA,UAAU,aACX,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,yBAAb,kBACA,2BAAOC,GAAG,eAAeC,KAAK,OAAOF,UAAU,aAC/C,2BAAOG,QAAQ,gBAAf,eAGR,yBAAKH,UAAU,aACX,yBAAKA,UAAU,uBACX,uBAAGA,UAAU,yBAAb,QACA,2BAAOC,GAAG,eAAeC,KAAK,WAAWF,UAAU,aACnD,2BAAOG,QAAQ,gBAAf,cAGR,yBAAKH,UAAU,aACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,sBACX,4BAAQA,UAAU,+BAA+BE,KAAK,SAASE,KAAK,UAApE,QACI,uBAAGJ,UAAU,wBAAb,UAGR,yBAAKA,UAAU,iCACX,uBAAGA,UAAU,kBAAb,cACA,kBAAC,IAAD,CAAMK,GAAI,iBAAV,aAIZ,yBAAKL,UAAU,YACf,yBAAKA,UAAU,aACX,yCAGA,wCAGA,4CAQpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOM,KAAM,gBAAiBC,UAAWX,U,GArDzCC,IAAMC,WCSXU,E,iLARP,OACI,4C,GAJUX,IAAMC,WCqBbW,E,YApBX,WAAYC,GAA6B,qEAC/BA,I,sEAGN,OACI,yC,GANOb,IAAMC,WCuCVa,E,YAlCb,WAAYC,GAAqC,qEACzCA,I,sEAIN,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKZ,UAAU,qBACb,kBAAC,IAAD,CAAMK,GAAI,IAAKL,UAAU,cAAzB,QACA,wBAAIC,GAAG,aAAaD,UAAU,8BAC5B,4BAAI,kBAAC,IAAD,CAAMK,GAAI,WAAYL,UAAU,YAAhC,YACJ,4BAAI,kBAAC,IAAD,CAAMK,GAAI,SAAUL,UAAU,YAA9B,SAAJ,QAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWC,IAClC,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAWE,U,GApBhBZ,IAAMC,WC6BZe,E,iLA9BP,OACI,4BAAQb,UAAU,eACd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,cAAd,kBACA,uBAAGA,UAAU,4BAAb,uEAEJ,yBAAKA,UAAU,wBACX,wBAAIA,UAAU,cAAd,SACA,4BACI,4BAAI,uBAAGA,UAAU,2BAA2Bc,KAAK,MAA7C,WACJ,4BAAI,uBAAGd,UAAU,2BAA2Bc,KAAK,MAA7C,WACJ,4BAAI,uBAAGd,UAAU,2BAA2Bc,KAAK,MAA7C,WACJ,4BAAI,uBAAGd,UAAU,2BAA2Bc,KAAK,MAA7C,eAKpB,yBAAKd,UAAU,oBACX,yBAAKA,UAAU,aAAf,SACQ,IAAIe,MAAOC,cADnB,cAEN,uBAAGhB,UAAU,iCAAiCc,KAAK,MAAnD,qB,GAzBOjB,IAAMC,WCaZmB,EAVO,WACpB,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.76034ef3.chunk.js","sourcesContent":["import React from 'react';\n\nclass Registration extends React.Component {\n\n    render() {\n        return (\n            <div>\n                Registration\n            </div>\n        );\n    }\n}\n\nexport default Registration;","import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Registration from '../Registration/Registration';\n\nclass Login extends React.Component {\n\n    render() {\n        return (\n            <Router>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"card-panel col s6 offset-s3 m6 offset-m3\">\n                            <form>\n                                <div className=\"row k-row\">\n                                    <div className=\"input-field col s12\">\n                                        <i className=\"material-icons prefix\">account_circle</i>\n                                        <input id=\"txt_username\" type=\"text\" className=\"validate\" />\n                                        <label htmlFor=\"txt_username\">User Name</label>\n                                    </div>\n                                </div>\n                                <div className=\"row k-row\">\n                                    <div className=\"input-field col s12\">\n                                        <i className=\"material-icons prefix\">lock</i>\n                                        <input id=\"txt_password\" type=\"Password\" className=\"validate\" />\n                                        <label htmlFor=\"txt_password\">Password</label>\n                                    </div>\n                                </div>\n                                <div className=\"row k-row\">\n                                    <div className=\"col s12\">\n                                        <div className=\"input-field col s6\">\n                                            <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Login\n                                                <i className=\"material-icons right\">send</i>\n                                            </button>\n                                        </div>\n                                        <div className=\"input-field col s6 k-linkicon\">\n                                            <i className=\"material-icons\">person_add</i>\n                                            <Link to={'/registration'}>Signup</Link>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"divider\"></div>\n                                <div className=\"row k-row\">\n                                    <div>\n                                        FaceBook\n                                    </div>\n                                    <div>\n                                        twitter\n                                    </div>\n                                    <div>\n                                        google\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <Switch>\n                    <Route path={'/registration'} component={Registration}></Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\n\nclass Contact extends React.Component {\n\n    render() {\n        return (\n            <div>\n                Contact\n            </div>\n        );\n    }\n}\n\nexport default Contact;","import React from 'react';\n\nclass Home extends React.Component<HomeProps, HomeState> {\n    constructor(props: Readonly<HomeProps>) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                Home\n            </div>\n        );\n    }\n}\n\ninterface HomeProps {\n\n}\n\ninterface HomeState {\n\n}\n\nexport default Home;","import React, { } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Login from '../../Authentication/Login/Login';\nimport Contact from '../../Contact/Contact';\nimport Home from '../../Home/Home';\n\nclass Header extends React.Component<HeaderProps, HeaderState>{\n  constructor(HeaderProps: Readonly<HeaderProps>) {\n    super(HeaderProps);\n  }\n\n  render() {\n    return (\n      <Router>\n        <nav>\n          <div className=\"nav-wrapper white\">\n            <Link to={'/'} className=\"brand-logo\">Logo</Link>\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n              <li><Link to={'/contact'} className=\"nav-link\">Contact</Link></li>\n              <li><Link to={'/login'} className=\"nav-link\">Login</Link> </li>\n            </ul>\n          </div>\n        </nav>\n        <Switch>\n          <Route path='/login' component={Login}></Route>\n          <Route path='/contact' component={Contact}></Route>\n          <Route path='/' component={Home}></Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\ninterface HeaderProps {\n\n}\n\ninterface HeaderState {\n\n}\n\nexport default Header;","import React from 'react';\n\nclass Footer extends React.Component {\n\n    render() {\n        return (\n            <footer className=\"page-footer\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col l6 s12\">\n                            <h5 className=\"white-text\">Footer Content</h5>\n                            <p className=\"grey-text text-lighten-4\">You can use rows and columns here to organize your footer content.</p>\n                        </div>\n                        <div className=\"col l4 offset-l2 s12\">\n                            <h5 className=\"white-text\">Links</h5>\n                            <ul>\n                                <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Link 1</a></li>\n                                <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Link 2</a></li>\n                                <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Link 3</a></li>\n                                <li><a className=\"grey-text text-lighten-3\" href=\"#!\">Link 4</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"footer-copyright\">\n                    <div className=\"container\">\n                        Â© {(new Date().getFullYear())} Katavuccol\n              <a className=\"grey-text text-lighten-4 right\" href=\"#!\">More Links</a>\n                    </div>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Nav/Header/Header';\nimport Footer from './components/Nav/Footer/Footer';\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Header />\n   \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}